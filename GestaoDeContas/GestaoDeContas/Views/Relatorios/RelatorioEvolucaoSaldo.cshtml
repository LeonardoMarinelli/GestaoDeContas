@{
    ViewData["Title"] = "Relatório de Evolução do Saldo";
    var labels = (string[])ViewBag.Labels;
    var saldoValores = (decimal[])ViewBag.SaldoValores;
}

<div class="container mt-4">
    <h2 class="text-center mb-4">Relatório de Evolução do Saldo ao Longo do Tempo</h2>

    <canvas id="saldoChart" width="800" height="400"></canvas>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script>
        var ctx = document.getElementById('saldoChart').getContext('2d');
        var saldoChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(labels)),
                datasets: [{
                    label: 'Saldo Acumulado (R$)',
                    data: @Html.Raw(Json.Serialize(saldoValores)),
                    backgroundColor: function(context) {
                        var value = context.raw;
                        return value >= 0 ? 'rgba(75, 192, 192, 0.7)' : 'rgba(255, 99, 132, 0.7)';
                    },
                    borderColor: function(context) {
                        var value = context.raw;
                        return value >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)';
                    },
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    datalabels: {
                        display: true,
                        align: 'end', 
                        anchor: 'end',
                        color: 'black', 
                        formatter: function(value) {
                            return 'R$ ' + value.toFixed(2); 
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                return 'Saldo: R$ ' + tooltipItem.raw.toFixed(2);
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return 'R$ ' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    </script>
</div>